name: design-service

on:
  pull_request:
    branches:
      - prod
    paths:
      - "design-service/**"

jobs:
  build-code:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 18.16.0
        uses: actions/setup-node@v3
        with:
          node-version: "18.16.0"

      - name: Install dependencies

        run: |
          cd design-service
          npm install

      - name: Build
        run: |
          cd design-service
          npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: build-code
    env:
      DOCKER_REPO: ${{ secrets.DOCKER_HUB_USERNAME }}/design
      DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}

    steps:
      - uses: actions/checkout@v3

      - name: Login to DockerHub
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - name: Build Docker Image
        run: |
          cd design-service
          docker build -t $DOCKER_REPO:latest .
      - name: Push Docker Image
        run: |
          docker push $DOCKER_REPO:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: Connect to server via SSH
        env:
          MACHINE_HOST: ${{ secrets.MACHINE_HOST }}
          MACHINE_USERNAME: ${{ secrets.MACHINE_USERNAME }}
          MACHINE_KEY: ${{ secrets.MACHINE_KEY }}
          SALT_ROUND: ${{ secrets.SALT_ROUND }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          VERIFY_EMAIL: ${{ secrets.VERIFY_EMAIL }}
          VERIFY_PASSWORD: ${{ secrets.VERIFY_PASSWORD }}
          DATABASE_URI_LOCAL: ${{ secrets.DATABASE_URI_LOCAL }}
          ENV_DB: ${{ secrets.ENV_DB }}
          ENV_CACHE: ${{ secrets.ENV_CACHE }}
          REDIS_URL_LOCAL: ${{ secrets.REDIS_URL_LOCAL }}
          DATABASE_URL_PROD: ${{ secrets.DATABASE_URL_PROD }}
          FRONT_END_URL: ${{ secrets.FRONT_END_URL }}
          PAYPAL_ID: ${{ secrets.PAYPAL_ID }}
          PAYPAL_SECRET: ${{ secrets.PAYPAL_SECRET }}
          RETURN_URL: ${{ secrets.RETURN_URL }}
          CANCEL_URL: ${{ secrets.CANCEL_URL }}
          AUTH_GRPC_URL: ${{ secrets.AUTH_GRPC_URL }}
          AI_GRPC_URL: ${{ secrets.AI_GRPC_URL }}
          AUTH_LOG_PATH: ${{ secrets.AUTH_LOG_PATH }}
          PAY_LOG_PATH: ${{ secrets.PAY_LOG_PATH }}
          DESIGN_LOG_PATH: ${{ secrets.DESIGN_LOG_PATH }}

        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.MACHINE_HOST }}
          username: ${{ env.MACHINE_USERNAME }}
          key: ${{ env.MACHINE_KEY }}
          port: 22
          script: |
            rm -rf Planify-Backend
            git clone https://github.com/PlanifyDev/Planify-Backend.git
            cd Planify-Backend

            touch .env

            echo SALT_ROUND=${{ secrets.SALT_ROUND }} >> .env
            echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
            echo VERIFY_EMAIL=${{ secrets.VERIFY_EMAIL }} >> .env
            echo VERIFY_PASSWORD=${{ secrets.VERIFY_PASSWORD }} >> .env
            echo DATABASE_URI_LOCAL=${{ secrets.DATABASE_URI_LOCAL }} >> .env
            echo ENV_DB=${{ secrets.ENV_DB }} >> .env
            echo ENV_CACHE=${{ secrets.ENV_CACHE }} >> .env
            echo REDIS_URL_LOCAL=${{ secrets.REDIS_URL_LOCAL }} >> .env
            echo DATABASE_URL_PROD=${{ secrets.DATABASE_URL_PROD }} >> .env
            echo FRONT_END_URL=${{ secrets.FRONT_END_URL }} >> .env 

            echo PAYPAL_ID=${{ secrets.PAYPAL_ID }} >> .env 
            echo PAYPAL_SECRET=${{ secrets.PAYPAL_SECRET }} >> .env
            echo RETURN_URL=${{ secrets.RETURN_URL }} >> .env
            echo CANCEL_URL=${{ secrets.CANCEL_URL }} >> .env
            echo AUTH_GRPC_URL=${{ secrets.AUTH_GRPC_URL }} >> .env

            echo AI_GRPC_URL=${{ secrets.AI_GRPC_URL }} >> .env

            echo AUTH_LOG_PATH=${{ secrets.AUTH_LOG_PATH }} >> .env 
            echo PAY_LOG_PATH=${{ secrets.PAY_LOG_PATH }} >> .env 
            echo DESIGN_LOG_PATH=${{ secrets.DESIGN_LOG_PATH }} >> .env 


            bash ./scripts/deploy.sh
